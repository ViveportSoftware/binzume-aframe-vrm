{
  "version": 3,
  "sources": ["../src/vrm/lookat.ts", "../src/vrm/blendshape.ts", "../src/vrm/firstperson.ts", "../src/vrm/avatar.ts", "../src/utils/physics-cannon.ts", "../src/utils/simpleik.ts", "../src/utils/vmd.ts", "../src/utils/bvh.ts", "../src/aframe-vrm.js"],
  "sourcesContent": ["export class VRMLookAt implements VRMModule {\n    public target: THREE.Object3D | null = null;\n    public angleLimit: number = 60 * Math.PI / 180;\n    private readonly _bone: THREE.Object3D;\n    private readonly _identQ = new THREE.Quaternion();\n    private readonly _zV = new THREE.Vector3(0, 0, -1);\n    private readonly _tmpQ0 = new THREE.Quaternion();\n    private readonly _tmpV0 = new THREE.Vector3();\n\n    constructor(initCtx: InitCtx) {\n        this._bone = initCtx.nodes[initCtx.vrm.firstPerson.firstPersonBone];\n    }\n\n    public update(t: number): void {\n        let target = this.target;\n        let bone = this._bone;\n        if (target == null || bone == null) {\n            return;\n        }\n        let targetDirection = bone.worldToLocal(this._tmpV0.setFromMatrixPosition(target.matrixWorld)).normalize();\n        let rot = this._tmpQ0.setFromUnitVectors(this._zV, targetDirection);\n        let boneLimit = this.angleLimit;\n        let speedFactor = 0.08;\n        let angle = 2 * Math.acos(rot.w);\n        if (angle > boneLimit * 1.5) {\n            rot = this._identQ;\n            speedFactor = 0.04;\n        } else if (angle > boneLimit) {\n            rot.setFromAxisAngle(this._tmpV0.set(rot.x, rot.y, rot.z).normalize(), boneLimit);\n        }\n        bone.quaternion.slerp(rot, speedFactor);\n    }\n}\n", "import { VRMAvatar } from \"./avatar\" // TODO: remove circular dependency\n\nexport class VRMBlendShapeUtil {\n    private readonly _avatar: VRMAvatar;\n    private _currentShape: any = {};\n    private animatedMorph: any;\n    private morphAction: any;\n\n    constructor(avatar: VRMAvatar) {\n        this._avatar = avatar;\n    }\n\n    public setBlendShapeWeight(name: string, value: number): void {\n        this._currentShape[name] = value;\n        if (value == 0) {\n            delete this._currentShape[name];\n        }\n        this._updateBlendShape()\n    }\n\n    public getBlendShapeWeight(name: string): number {\n        return this._currentShape[name] || 0;\n    }\n\n    public resetBlendShape() {\n        this._currentShape = {};\n        this._updateBlendShape();\n    }\n\n    public startBlink(blinkInterval: number): void {\n        if (this.animatedMorph) {\n            return;\n        }\n        this.animatedMorph = {\n            name: 'BLINK',\n            times: [0, blinkInterval - 0.2, blinkInterval - 0.1, blinkInterval],\n            values: [0, 0, 1, 0]\n        };\n        this._updateBlendShape();\n    }\n\n    public startRaiseHandJoyAnimation(): void {\n        if (this.animatedMorph) {\n            this.stopBlink();\n        }\n        this.animatedMorph = {\n            name: \"JOY\",\n            times: [0, 0.5, 1, 2, 4, 5, 5.5],\n            values: [0, 0.3, 1, 1, 1, 0.4, 0.3]\n        };\n        this._updateBlendShape();\n    }\n\n    public startStandingGreetingJoyAnimation(): void {\n        if (this.animatedMorph) {\n          this.stopBlink();\n        }\n        this.animatedMorph = {\n          name: \"JOY\",\n          times: [0, 1, 2, 2.5, 3, 5, 6.3],\n          values: [0, 0, 0.3, 0.8, 1, 0.4, 0.3]\n        };\n        this._updateBlendShape();\n    }\n\n    public stopJoyAnimation(): void {\n        this.animatedMorph = null;\n        this._updateBlendShape();\n    }\n\n    public startTalkingAnimation(): void {\n        if (this.animatedMorph) {\n          this.stopBlink();\n        }\n        const time1 = Math.random() * 0.5;\n        const time2 = Math.random() * 0.5 + 0.5;\n        const value2 = Math.min(Math.random() + 0.3, 1);\n        const value1 = Math.random() * value2;\n\n        this.animatedMorph = {\n          name: \"O\",\n          times: [0, time1, 0.5, time2, 1],\n          values: [0, value1, value2, 0.5, 0]\n        };\n        this._updateBlendShape();\n    }\n\n    public stopTalkingAnimation(): void {\n        this.animatedMorph = null;\n        this._updateBlendShape();\n    }\n\n    public stopBlink(): void {\n        this.animatedMorph = null;\n        this._updateBlendShape();\n    }\n\n    private _updateBlendShape(): void {\n        // TODO: refactoring. use THREE.AnimationBlendMode.\n        let addWeights = (data: Record<string, any>, name: string, weights: number[]) => {\n            let blend = this._avatar.blendShapes[name];\n            blend && blend.binds.forEach(bind => {\n                let tname = bind.target.name;\n                let values = data[tname] || (data[tname] = new Array(bind.target.morphTargetInfluences.length * weights.length).fill(0));\n                for (let t = 0; t < weights.length; t++) {\n                    let i = t * bind.target.morphTargetInfluences.length + bind.index;\n                    values[i] += Math.max(bind.weight * weights[t], values[i]); // blend func : max\n                }\n            });\n        };\n        let times = [0], trackdata: Record<string, any[]> = {};\n        if (this.animatedMorph) {\n            times = this.animatedMorph.times;\n            addWeights(trackdata, this.animatedMorph.name, this.animatedMorph.values);\n        }\n        for (let [name, value] of Object.entries(this._currentShape)) {\n            if (this._avatar.blendShapes[name]) {\n                addWeights(trackdata, name, new Array(times.length).fill(value));\n            }\n        }\n        let tracks = Object.entries(trackdata).map(([tname, values]) =>\n            new THREE.NumberKeyframeTrack(tname + '.morphTargetInfluences', times, values));\n        let nextAction = null;\n        if (tracks.length > 0) {\n            let clip = new THREE.AnimationClip('morph', undefined, tracks);\n            nextAction = this._avatar.mixer.clipAction(clip).setEffectiveWeight(1.0).play();\n        }\n        this.morphAction && this.morphAction.stop();\n        this.morphAction = nextAction;\n    }\n}\n", "\nexport class FirstPersonMeshUtil {\n    private readonly _firstPersonBone: THREE.Bone;\n    private readonly _annotatedMeshes: { flag: string, mesh: THREE.SkinnedMesh }[]\n    constructor(initCtx: InitCtx) {\n        this._firstPersonBone = initCtx.nodes[initCtx.vrm.firstPerson.firstPersonBone] as THREE.Bone;\n        this._annotatedMeshes =\n            initCtx.vrm.firstPerson.meshAnnotations.map(ma => ({ flag: ma.firstPersonFlag, mesh: initCtx.meshes[ma.mesh] }));\n    }\n    public setFirstPerson(firstPerson: boolean): void {\n        this._annotatedMeshes.forEach(a => {\n            if (a.flag == 'ThirdPersonOnly') {\n                a.mesh.visible = !firstPerson;\n            } else if (a.flag == 'FirstPersonOnly') {\n                a.mesh.visible = firstPerson;\n            } else if (a.flag == 'Auto' && this._firstPersonBone) {\n                if (firstPerson) {\n                    this._genFirstPersonMesh(a.mesh);\n                } else {\n                    this._resetFirstPersonMesh(a.mesh);\n                }\n            }\n        });\n    }\n    private _genFirstPersonMesh(mesh: THREE.SkinnedMesh): void {\n        mesh.children.forEach(c => this._genFirstPersonMesh(c as THREE.SkinnedMesh));\n        if (!mesh.isSkinnedMesh) {\n            return;\n        }\n        let firstPersonBones: Record<string, boolean> = {};\n        this._firstPersonBone.traverse(b => {\n            firstPersonBones[b.uuid] = true;\n        });\n        let skeletonBones = mesh.skeleton.bones;\n        let skinIndex = mesh.geometry.attributes.skinIndex;\n        let skinWeight = mesh.geometry.attributes.skinWeight;\n        let index = mesh.geometry.index!;\n        let vertexErase = [];\n        let vcount = 0, fcount = 0;\n        for (let i = 0; i < skinIndex.array.length; i++) {\n            let b = skinIndex.array[i];\n            if (skinWeight.array[i] > 0 && firstPersonBones[skeletonBones[b].uuid]) {\n                if (!vertexErase[i / skinIndex.itemSize | 0]) {\n                    vcount++;\n                    vertexErase[i / skinIndex.itemSize | 0] = true;\n                }\n            }\n        }\n        let trinagleErase = [];\n        for (let i = 0; i < index.count; i++) {\n            if (vertexErase[index.array[i]] && !trinagleErase[i / 3 | 0]) {\n                trinagleErase[i / 3 | 0] = true;\n                fcount++;\n            }\n        }\n        if (fcount == 0) {\n            return;\n        } else if (fcount * 3 == index.count) {\n            mesh.visible = false;\n            return;\n        }\n        // TODO: erase triangle.\n    }\n    private _resetFirstPersonMesh(mesh: THREE.SkinnedMesh): void {\n        mesh.children.forEach(c => this._resetFirstPersonMesh(c as THREE.SkinnedMesh));\n        mesh.visible = true;\n    }\n}\n", "import { VRMLookAt } from \"./lookat\"\nimport { VRMBlendShapeUtil } from \"./blendshape\"\nimport { FirstPersonMeshUtil } from \"./firstperson\"\nimport { GLTFLoader, GLTF } from \"three/examples/jsm/loaders/GLTFLoader\" // type only\n\nexport type PoseData = { bones: any[], blendShape?: any[] }\nexport class VRMLoader {\n    private readonly gltfLoader: GLTFLoader;\n    constructor(gltfLoader?: any) {\n        // @ts-ignore\n        this.gltfLoader = gltfLoader || new THREE.GLTFLoader(THREE.DefaultLoadingManager);\n    }\n    public async load(url: string, moduleSpecs: ModuleSpec[] = []): Promise<VRMAvatar> {\n        return new Promise((resolve, reject) => {\n            this.gltfLoader.load(url, async (gltf) => {\n                resolve(await new VRMAvatar(gltf).init(gltf, moduleSpecs));\n            }, undefined, reject);\n        });\n    }\n}\n\nexport class VRMAvatar {\n    public readonly model: THREE.Object3D & { skeleton?: THREE.Skeleton };\n    public readonly mixer: THREE.AnimationMixer;\n    public readonly bones: Record<string, THREE.Bone> = {};\n    public blendShapes: Record<string, { name: string, binds: Record<string, any>[] }> = {};\n    public readonly modules: Record<string, VRMModule> = {};\n    public meta: Record<string, any> = {};\n    public readonly isVRM: boolean;\n    public readonly animations: THREE.AnimationClip[];\n    public firstPersonBone: THREE.Bone | null = null;\n\n    private _firstPersonMeshUtil: FirstPersonMeshUtil | null = null;\n    private _blendShapeUtil: VRMBlendShapeUtil;\n\n    // TODO: move to another component.\n    public boneConstraints = {\n        'head': { type: 'ball', limit: 60 * Math.PI / 180, twistAxis: new THREE.Vector3(0, 1, 0), twistLimit: 60 * Math.PI / 180 },\n        'neck': { type: 'ball', limit: 30 * Math.PI / 180, twistAxis: new THREE.Vector3(0, 1, 0), twistLimit: 10 * Math.PI / 180 },\n        'leftUpperLeg': { type: 'ball', limit: 170 * Math.PI / 180, twistAxis: new THREE.Vector3(0, -1, 0), twistLimit: Math.PI / 2 },\n        'rightUpperLeg': { type: 'ball', limit: 170 * Math.PI / 180, twistAxis: new THREE.Vector3(0, -1, 0), twistLimit: Math.PI / 2 },\n        'leftLowerLeg': { type: 'hinge', axis: new THREE.Vector3(1, 0, 0), min: -170 * Math.PI / 180, max: 0 * Math.PI / 180 },\n        'rightLowerLeg': { type: 'hinge', axis: new THREE.Vector3(1, 0, 0), min: -170 * Math.PI / 180, max: 0 * Math.PI / 180 }\n    };\n\n    constructor(gltf: GLTF) {\n        this.model = gltf.scene;\n        this.mixer = new THREE.AnimationMixer(this.model);\n        this.isVRM = (gltf.userData.gltfExtensions || {}).VRM != null;\n        this.animations = gltf.animations || [];\n        this._blendShapeUtil = new VRMBlendShapeUtil(this);\n    }\n\n    public async init(gltf: GLTF, moduleSpecs: ModuleSpec[]) {\n        if (!this.isVRM) {\n            return this;\n        }\n        let vrmExt = gltf.userData.gltfExtensions.VRM as VRMExtension;\n        let bones = this.bones;\n        let nodes = await gltf.parser.getDependencies('node');\n        let meshes = await gltf.parser.getDependencies('mesh');\n        let initCtx = { nodes: nodes, meshes: meshes, vrm: vrmExt, gltf: gltf };\n\n        this.meta = vrmExt.meta;\n        Object.values(vrmExt.humanoid.humanBones).forEach((humanBone) => {\n            bones[humanBone.bone] = nodes[humanBone.node];\n        });\n        if (vrmExt.firstPerson) {\n            if (vrmExt.firstPerson.firstPersonBone) {\n                this.firstPersonBone = nodes[vrmExt.firstPerson.firstPersonBone];\n                this.modules.lookat = new VRMLookAt(initCtx);\n            }\n            if (vrmExt.firstPerson.meshAnnotations) {\n                this._firstPersonMeshUtil = new FirstPersonMeshUtil(initCtx);\n            }\n        }\n        this.model.skeleton = new THREE.Skeleton(Object.values(bones));\n        this._fixBoundingBox();\n        if (vrmExt.blendShapeMaster) {\n            this._initBlendShapes(initCtx);\n        }\n\n        for (let spec of moduleSpecs) {\n            let mod = spec.instantiate(this, initCtx);\n            if (mod) {\n                this.modules[spec.name] = mod;\n            }\n        }\n        return this;\n    }\n    private _initBlendShapes(ctx: InitCtx): void {\n        this.blendShapes = (ctx.vrm.blendShapeMaster.blendShapeGroups || []).reduce((blendShapes: Record<string, any>, bg) => {\n            let binds = bg.binds.flatMap(bind => {\n                let meshObj = ctx.meshes[bind.mesh];\n                return (meshObj.isSkinnedMesh ? [meshObj] : meshObj.children.filter(obj => (<THREE.SkinnedMesh>obj).isSkinnedMesh))\n                    .map(obj => ({ target: obj, index: bind.index, weight: bind.weight / 100 }));\n            });\n            blendShapes[(bg.presetName || bg.name).toUpperCase()] = { name: bg.name, binds: binds };\n            return blendShapes;\n        }, {});\n    }\n    private _fixBoundingBox(): void {\n        let bones = this.bones;\n        if (!bones.hips) {\n            return;\n        }\n        // Extends bounding box.\n        let tmpV = new THREE.Vector3();\n        let center = bones.hips.getWorldPosition(tmpV).clone();\n        this.model.traverse((obj) => {\n            let mesh = <THREE.SkinnedMesh>obj;\n            if (mesh.isSkinnedMesh) {\n                let pos = mesh.getWorldPosition(tmpV).sub(center).multiplyScalar(-1);\n                let r = (pos.clone().sub(mesh.geometry.boundingSphere!.center).length() + mesh.geometry.boundingSphere!.radius);\n                mesh.geometry.boundingSphere!.center.copy(pos);\n                mesh.geometry.boundingSphere!.radius = r;\n                mesh.geometry.boundingBox!.min.set(pos.x - r, pos.y - r, pos.z - r);\n                mesh.geometry.boundingBox!.max.set(pos.x + r, pos.y + r, pos.z + r);\n            }\n        });\n    }\n    public update(timeDelta: number): void {\n        this.mixer.update(timeDelta);\n        for (let m of Object.values(this.modules)) {\n            m.update(timeDelta);\n        }\n    }\n    public setModule(name: string, module: VRMModule): void {\n        this.removeModule(name);\n        this.modules[name] = module;\n    }\n    public removeModule(name: string): void {\n        let module = this.modules[name];\n        module && module.dispose && module.dispose();\n        delete this.modules[name];\n    }\n    public dispose(): void {\n        for (let m of Object.keys(this.modules)) {\n            this.removeModule(m);\n        }\n        this.model.traverse((obj) => {\n            let mesh = obj as THREE.Mesh;\n            if (mesh.isMesh) {\n                mesh.geometry.dispose();\n                (mesh.material as THREE.MeshBasicMaterial).map?.dispose();\n            }\n            // @ts-ignore\n            obj.skeleton && obj.skeleton.dispose();\n        });\n    }\n\n    // Util functions.\n    get lookAtTarget(): THREE.Object3D | null {\n        let lookat = this.modules.lookat as VRMLookAt | null;\n        return lookat ? lookat.target : null;\n    }\n    set lookAtTarget(v: THREE.Object3D) {\n        let lookat = this.modules.lookat as VRMLookAt | null;\n        if (lookat) {\n            lookat.target = v;\n        }\n    }\n    public setBlendShapeWeight(name: string, value: number): void {\n        this._blendShapeUtil.setBlendShapeWeight(name, value);\n    }\n    public getBlendShapeWeight(name: string): number {\n        return this._blendShapeUtil.getBlendShapeWeight(name);\n    }\n    public resetBlendShape(): void {\n        this._blendShapeUtil.resetBlendShape();\n    }\n    public startBlink(blinkInterval: number): void {\n        this._blendShapeUtil.startBlink(blinkInterval);\n    }\n    public startRaiseHandJoyAnimation(): void {\n        this._blendShapeUtil.startRaiseHandJoyAnimation();\n    }\n    public startStandingGreetingJoyAnimation(): void {\n        this._blendShapeUtil.startStandingGreetingJoyAnimation();\n    }\n    public stopJoyAnimation(): void {\n        this._blendShapeUtil.stopJoyAnimation();\n    }\n    public startTalkingAnimation(): void {\n        this._blendShapeUtil.startTalkingAnimation();\n    }\n    public stopTalkingAnimation(): void {\n        this._blendShapeUtil.stopTalkingAnimation();\n    }\n    public stopBlink(): void {\n        this._blendShapeUtil.stopBlink();\n    }\n    public getPose(exportMorph: boolean): PoseData {\n        let poseData: PoseData = {\n            bones: Object.keys(this.bones).map((name) =>\n                ({ name: name, q: this.bones[name].quaternion.toArray() })\n            )\n        }\n        if (exportMorph) {\n            poseData.blendShape = Object.keys(this.blendShapes).map((name) =>\n                ({ name: name, value: this.getBlendShapeWeight(name) })\n            );\n        }\n        return poseData\n    }\n    public setPose(pose: PoseData): void {\n        if (pose.bones) {\n            for (let boneParam of pose.bones) {\n                if (this.bones[boneParam.name]) {\n                    this.bones[boneParam.name].quaternion.fromArray(boneParam.q);\n                }\n            }\n        }\n        if (pose.blendShape) {\n            for (let morph of pose.blendShape) {\n                this.setBlendShapeWeight(morph.name, morph.value)\n            }\n        }\n    }\n    public restPose(): void {\n        for (let b of Object.values(this.bones)) {\n            b.quaternion.set(0, 0, 0, 1);\n        }\n    }\n    public setFirstPerson(firstPerson: boolean): void {\n        if (this._firstPersonMeshUtil) {\n            this._firstPersonMeshUtil.setFirstPerson(firstPerson);\n        }\n    }\n}\n", "export class VRMPhysicsCannonJS implements VRMModule {\n    collisionGroup = 2;\n    enable = false;\n    binds: [THREE.Object3D, CANNON.Body][] = [];\n    fixedBinds: [THREE.Object3D, CANNON.Body][] = [];\n    bodies: CANNON.Body[] = [];\n    constraints: any[] = [];\n    private readonly _tmpQ0 = new THREE.Quaternion();\n    private readonly _tmpV0 = new THREE.Vector3();\n    private readonly _tmpV1 = new THREE.Vector3();\n    springBoneSystem: any;\n    world: CANNON.World | null = null;\n    internalWorld: boolean = false;\n    constructor(initctx: InitCtx) {\n        this.springBoneSystem = this._springBoneSystem();\n        this._init(initctx);\n    }\n    private _init(initctx: InitCtx): void {\n        if (!initctx.vrm.secondaryAnimation) {\n            return;\n        }\n        let nodes = initctx.nodes;\n        let secondaryAnimation = initctx.vrm.secondaryAnimation;\n        let allColliderGroupsMask = 0;\n        let colliderMarginFactor = 0.9; // TODO: Remove this.\n        (secondaryAnimation.colliderGroups || []).forEach((cc, i) => {\n            let node = nodes[cc.node];\n            for (let collider of cc.colliders) {\n                let body = new CANNON.Body({ mass: 0, collisionFilterGroup: 1 << (this.collisionGroup + i + 1), collisionFilterMask: -1 });\n                body.addShape(new CANNON.Sphere(collider.radius * colliderMarginFactor), collider.offset);\n                this.bodies.push(body);\n                this.fixedBinds.push([node, body]);\n                allColliderGroupsMask |= body.collisionFilterGroup;\n            }\n        });\n        for (let bg of secondaryAnimation.boneGroups || []) {\n            let gravity = new CANNON.Vec3().copy(bg.gravityDir || { x: 0, y: -1, z: 0 }).scale(bg.gravityPower || 0);\n            let radius = bg.hitRadius || 0.05;\n            let collisionFilterMask = ~(this.collisionGroup | allColliderGroupsMask);\n            for (let g of bg.colliderGroups || []) {\n                collisionFilterMask |= 1 << (this.collisionGroup + g + 1);\n            }\n            for (let b of bg.bones) {\n                let root = new CANNON.Body({ mass: 0, collisionFilterGroup: 0, collisionFilterMask: 0 });\n                root.position.copy(nodes[b].parent.getWorldPosition(this._tmpV0));\n                this.bodies.push(root);\n                this.fixedBinds.push([nodes[b].parent, root]);\n                let add = (parentBody: CANNON.Body, node: THREE.Object3D) => {\n                    let c = node.getWorldPosition(this._tmpV0);\n                    let wpos = c.clone(); // TODO\n                    let n = node.children.length + 1;\n                    if (node.children.length > 0) {\n                        node.children.forEach(n => {\n                            c.add(n.getWorldPosition(this._tmpV1));\n                        });\n                    } else {\n                        c.add(node.parent!.getWorldPosition(this._tmpV1).sub(c).normalize().multiplyScalar(-0.1).add(c));\n                        n = 2;\n                    }\n                    c.multiplyScalar(1 / n);\n\n                    let body = new CANNON.Body({\n                        mass: 0.5,\n                        linearDamping: Math.max(bg.dragForce || 0, 0.0001),\n                        angularDamping: Math.max(bg.dragForce || 0, 0.0001),\n                        collisionFilterGroup: this.collisionGroup,\n                        collisionFilterMask: collisionFilterMask,\n                        position: new CANNON.Vec3().copy(c),\n                    });\n                    body.addShape(new CANNON.Sphere(radius));\n                    this.bodies.push(body);\n\n                    let o = new CANNON.Vec3().copy(this._tmpV1.copy(wpos).sub(c));\n                    let d = new CANNON.Vec3().copy(wpos.sub(parentBody.position));\n                    let joint = new CANNON.PointToPointConstraint(body, o, parentBody, d);\n                    this.constraints.push(joint);\n\n                    let l = body.position.distanceTo(parentBody.position);\n                    this.binds.push([node, body]);\n                    this.springBoneSystem.objects.push({ body: body, parentBody: parentBody, force: gravity, boneGroup: bg, size: radius, distanceToParent: l });\n                    node.children.forEach(n => (n as THREE.Bone).isBone && add(body, n));\n                };\n                add(root, nodes[b]);\n            }\n        }\n    }\n    private _springBoneSystem() {\n        let _q0 = new CANNON.Quaternion();\n        let _q1 = new CANNON.Quaternion();\n        let _v0 = new CANNON.Vec3();\n        return {\n            world: null as CANNON.World | null,\n            objects: [] as any[],\n            update() {\n                let g = this.world!.gravity, dt = this.world!.dt;\n                let avlimit = 0.1;\n                let stiffnessScale = 1600;\n                for (let b of this.objects) {\n                    let body = b.body as CANNON.Body, parent = b.parentBody;\n                    // Cancel world.gravity and apply boneGroup.gravity.\n                    let f = body.force, m = body.mass, g2 = b.force;\n                    f.x += m * (-g.x + g2.x);\n                    f.y += m * (-g.y + g2.y);\n                    f.z += m * (-g.z + g2.z);\n\n                    // Fix body position\n                    let d = body.position.distanceTo(parent.position);\n                    if (Math.abs(d - b.distanceToParent) > 0.01 && d > 0) {\n                        parent.position.lerp(body.position, b.distanceToParent / d, body.position);\n                    }\n\n                    // angularVelocity limitation\n                    let av = body.angularVelocity.length();\n                    if (av > avlimit) {\n                        body.angularVelocity.scale(avlimit / av, body.angularVelocity);\n                    }\n\n                    // apply spring(?) force.\n                    let approxInertia = b.size * b.size * m;\n                    let rot = body.quaternion.mult(parent.quaternion.inverse(_q0), _q1);\n                    let [axis, angle] = rot.toAxisAngle(_v0);\n                    angle = angle - Math.PI * 2 * Math.floor((angle + Math.PI) / (Math.PI * 2));\n                    let tf = angle * b.boneGroup.stiffiness * stiffnessScale; // stiff'i'ness\n                    if (Math.abs(tf) > Math.abs(angle / dt / dt * 0.5)) {\n                        tf = angle / dt / dt * 0.5;\n                    }\n                    let af = axis.scale(-tf * approxInertia, axis);\n                    body.torque.vadd(af, body.torque);\n                }\n            }\n        };\n    }\n    public attach(world: CANNON.World | null): void {\n        this.detach();\n        this.internalWorld = world == null;\n        this.world = world || new CANNON.World();\n        this.springBoneSystem.world = this.world;\n        this.world.subsystems.push(this.springBoneSystem);\n        this.bodies.forEach(b => this.world!.addBody(b));\n        this.constraints.forEach(c => this.world!.addConstraint(c));\n        this.reset();\n        this.enable = true;\n        // HACK: update collision mask.\n        this.world.bodies.forEach(b => {\n            if (b.collisionFilterGroup == 1 && b.collisionFilterMask == 1) {\n                b.collisionFilterMask = -1;\n            }\n        });\n    }\n    public detach(): void {\n        if (!this.world) {\n            return;\n        }\n        this.world.subsystems = this.world.subsystems.filter(s => s != this.springBoneSystem);\n        this.world.constraints = this.world.constraints.filter(c => !this.constraints.includes(c));\n        this.world.bodies = this.world.bodies.filter(b => !this.bodies.includes(b));\n        this.world = null;\n        this.enable = false;\n    }\n    public reset(): void {\n        this.fixedBinds.forEach(([node, body]) => {\n            node.updateWorldMatrix(true, false);\n            body.position.copy(node.getWorldPosition(this._tmpV0));\n            body.quaternion.copy(node.parent!.getWorldQuaternion(this._tmpQ0));\n        });\n        this.binds.forEach(([node, body]) => {\n            node.updateWorldMatrix(true, false);\n            body.position.copy(node.getWorldPosition(this._tmpV0));\n            body.quaternion.copy(node.getWorldQuaternion(this._tmpQ0));\n        });\n    }\n    public update(timeDelta: number): void {\n        if (!this.enable) {\n            return;\n        }\n        this.fixedBinds.forEach(([node, body]) => {\n            body.position.copy(node.getWorldPosition(this._tmpV0));\n            body.quaternion.copy(node.getWorldQuaternion(this._tmpQ0));\n        });\n        if (this.internalWorld) {\n            this.world!.step(1 / 60, timeDelta);\n        }\n        this.binds.forEach(([node, body]) => {\n            node.quaternion.copy(body.quaternion).premultiply(node.parent!.getWorldQuaternion(this._tmpQ0).invert());\n        });\n    }\n    public dispose(): void {\n        this.detach();\n    }\n}\n", "\nexport class IKNode {\n    position: THREE.Vector3;\n    constraint: { [key: string]: any };\n    userData: any;\n\n    quaternion = new THREE.Quaternion();\n    worldMatrix = new THREE.Matrix4();\n    worldPosition = new THREE.Vector3();\n\n    constructor(position: THREE.Vector3, constraint: { [key: string]: any }, userData: any) {\n        this.position = position;\n        this.constraint = constraint;\n        this.userData = userData;\n    }\n}\nexport class IKSolver {\n    iterationLimit = 50;\n    thresholdSq = 0.0001;\n    _iv = new THREE.Vector3(1, 1, 1);\n    _tmpV0 = new THREE.Vector3();\n    _tmpV1 = new THREE.Vector3();\n    _tmpV2 = new THREE.Vector3();\n    _tmpQ0 = new THREE.Quaternion();\n    _tmpQ1 = new THREE.Quaternion();\n\n    _updateChain(bones: IKNode[], parentMat: THREE.Matrix4) {\n        for (let bone of bones) {\n            bone.worldMatrix.compose(bone.position, bone.quaternion, this._iv).premultiply(parentMat);\n            bone.worldPosition.setFromMatrixPosition(bone.worldMatrix);\n            parentMat = bone.worldMatrix;\n        }\n    }\n    solve(bones: IKNode[], target: THREE.Vector3, boneSpaceMat: THREE.Matrix4) {\n        this._updateChain(bones, boneSpaceMat);\n        let endPosition = bones[bones.length - 1].worldPosition;\n        let startDistance = endPosition.distanceToSquared(target);\n        let targetDir = this._tmpV2;\n        let endDir = this._tmpV1;\n        let rotation = this._tmpQ1;\n        for (let i = 0; i < this.iterationLimit; i++) {\n            if (endPosition.distanceToSquared(target) < this.thresholdSq) {\n                break;\n            }\n            let currentTarget = this._tmpV0.copy(target);\n            for (let j = bones.length - 2; j >= 0; j--) {\n                let bone = bones[j];\n                let endPos = bones[j + 1].position;\n                bone.worldMatrix.decompose(this._tmpV1, this._tmpQ0, this._tmpV2);\n                targetDir.copy(currentTarget).sub(this._tmpV1).applyQuaternion(rotation.copy(this._tmpQ0).invert()).normalize();\n                endDir.copy(endPos).normalize();\n                rotation.setFromUnitVectors(endDir, targetDir);\n                bone.quaternion.multiply(rotation);\n                let v = endDir.copy(endPos).applyQuaternion(this._tmpQ0.multiply(rotation));\n                if (bone.constraint) {\n                    rotation.copy(bone.quaternion).invert();\n                    if (bone.constraint.apply(bone)) {\n                        // TODO\n                        rotation.premultiply(bone.quaternion);\n                        v.copy(endPos).applyQuaternion(this._tmpQ0.multiply(rotation));\n                    }\n                }\n                currentTarget.sub(v);\n            }\n            this._updateChain(bones, boneSpaceMat);\n        }\n        return endPosition.distanceToSquared(target) < startDistance;\n    }\n}\n\n\nexport class SimpleIK {\n    solver = new IKSolver();\n    chains: any[];\n    update(t : number) {\n\n    }\n}\n", "import { VRMAvatar } from \"../vrm/avatar\"\n\nexport class VMDLoaderWrapper {\n    boneMapping: { bone: string, nodeNames: string[] }[] = [\n        { \"bone\": \"hips\", \"nodeNames\": [\"\u30BB\u30F3\u30BF\u30FC\", \"center\"] },\n        { \"bone\": \"spine\", \"nodeNames\": [\"\u4E0A\u534A\u8EAB\", \"upper body\"] },\n        { \"bone\": \"chest\", \"nodeNames\": [\"\u4E0A\u534A\u8EAB2\", \"upper body2\"] },\n        { \"bone\": \"neck\", \"nodeNames\": [\"\u9996\", \"neck\"] },\n        { \"bone\": \"head\", \"nodeNames\": [\"\u982D\", \"head\"] },\n        { \"bone\": \"leftShoulder\", \"nodeNames\": [\"\u5DE6\u80A9\", \"shoulder_L\"] },\n        { \"bone\": \"leftUpperArm\", \"nodeNames\": [\"\u5DE6\u8155\", \"arm_L\"] },\n        { \"bone\": \"leftLowerArm\", \"nodeNames\": [\"\u5DE6\u3072\u3058\", \"elbow_L\"] },\n        { \"bone\": \"leftHand\", \"nodeNames\": [\"\u5DE6\u624B\u9996\", \"wrist_L\"] },\n        { \"bone\": \"rightShoulder\", \"nodeNames\": [\"\u53F3\u80A9\", \"shoulder_R\"] },\n        { \"bone\": \"rightUpperArm\", \"nodeNames\": [\"\u53F3\u8155\", \"arm_R\"] },\n        { \"bone\": \"rightLowerArm\", \"nodeNames\": [\"\u53F3\u3072\u3058\", \"elbow_R\"] },\n        { \"bone\": \"rightHand\", \"nodeNames\": [\"\u53F3\u624B\u9996\", \"wrist_R\"] },\n        { \"bone\": \"leftUpperLeg\", \"nodeNames\": [\"\u5DE6\u8DB3\", \"leg_L\"] },\n        { \"bone\": \"leftLowerLeg\", \"nodeNames\": [\"\u5DE6\u3072\u3056\", \"knee_L\"] },\n        { \"bone\": \"leftFoot\", \"nodeNames\": [\"\u5DE6\u8DB3\u9996\", \"ankle_L\"] },\n        { \"bone\": \"leftToes\", \"nodeNames\": [\"\u5DE6\u3064\u307E\u5148\", \"L toe\"] },\n        { \"bone\": \"rightUpperLeg\", \"nodeNames\": [\"\u53F3\u8DB3\", \"leg_R\"] },\n        { \"bone\": \"rightLowerLeg\", \"nodeNames\": [\"\u53F3\u3072\u3056\", \"knee_R\"] },\n        { \"bone\": \"rightFoot\", \"nodeNames\": [\"\u53F3\u8DB3\u9996\", \"ankle_R\"] },\n        { \"bone\": \"rightToes\", \"nodeNames\": [\"\u53F3\u3064\u307E\u5148\", \"R toe\"] },\n        { \"bone\": \"leftEye\", \"nodeNames\": [\"\u5DE6\u76EE\", \"eye_L\"] },\n        { \"bone\": \"rightEye\", \"nodeNames\": [\"\u53F3\u76EE\", \"eye_R\"] },\n        { \"bone\": \"leftThumbProximal\", \"nodeNames\": [\"\u5DE6\u89AA\u6307\uFF10\", \"thumb0_L\"] },\n        { \"bone\": \"leftThumbIntermediate\", \"nodeNames\": [\"\u5DE6\u89AA\u6307\uFF11\", \"thumb1_L\"] },\n        { \"bone\": \"leftThumbDistal\", \"nodeNames\": [\"\u5DE6\u89AA\u6307\uFF12\", \"thumb2_L\"] },\n        { \"bone\": \"leftIndexProximal\", \"nodeNames\": [\"\u5DE6\u4EBA\u6307\uFF11\", \"fore1_L\"] },\n        { \"bone\": \"leftIndexIntermediate\", \"nodeNames\": [\"\u5DE6\u4EBA\u6307\uFF12\", \"fore2_L\"] },\n        { \"bone\": \"leftIndexDistal\", \"nodeNames\": [\"\u5DE6\u4EBA\u6307\uFF13\", \"fore3_L\"] },\n        { \"bone\": \"leftMiddleProximal\", \"nodeNames\": [\"\u5DE6\u4E2D\u6307\uFF11\", \"middle1_L\"] },\n        { \"bone\": \"leftMiddleIntermediate\", \"nodeNames\": [\"\u5DE6\u4E2D\u6307\uFF12\", \"middle2_L\"] },\n        { \"bone\": \"leftMiddleDistal\", \"nodeNames\": [\"\u5DE6\u4E2D\u6307\uFF13\", \"middle3_L\"] },\n        { \"bone\": \"leftRingProximal\", \"nodeNames\": [\"\u5DE6\u85AC\u6307\uFF11\", \"third1_L\"] },\n        { \"bone\": \"leftRingIntermediate\", \"nodeNames\": [\"\u5DE6\u85AC\u6307\uFF12\", \"third2_L\"] },\n        { \"bone\": \"leftRingDistal\", \"nodeNames\": [\"\u5DE6\u85AC\u6307\uFF13\", \"third3_L\"] },\n        { \"bone\": \"leftLittleProximal\", \"nodeNames\": [\"\u5DE6\u5C0F\u6307\uFF11\", \"little1_L\"] },\n        { \"bone\": \"leftLittleIntermediate\", \"nodeNames\": [\"\u5DE6\u5C0F\u6307\uFF12\", \"little2_L\"] },\n        { \"bone\": \"leftLittleDistal\", \"nodeNames\": [\"\u5DE6\u5C0F\u6307\uFF13\", \"little3_L\"] },\n        { \"bone\": \"rightThumbProximal\", \"nodeNames\": [\"\u53F3\u89AA\u6307\uFF10\", \"thumb0_R\"] },\n        { \"bone\": \"rightThumbIntermediate\", \"nodeNames\": [\"\u53F3\u89AA\u6307\uFF11\", \"thumb1_R\"] },\n        { \"bone\": \"rightThumbDistal\", \"nodeNames\": [\"\u53F3\u89AA\u6307\uFF12\", \"thumb2_R\"] },\n        { \"bone\": \"rightIndexProximal\", \"nodeNames\": [\"\u53F3\u4EBA\u6307\uFF11\", \"fore1_R\"] },\n        { \"bone\": \"rightIndexIntermediate\", \"nodeNames\": [\"\u53F3\u4EBA\u6307\uFF12\", \"fore2_R\"] },\n        { \"bone\": \"rightIndexDistal\", \"nodeNames\": [\"\u53F3\u4EBA\u6307\uFF13\", \"fore3_R\"] },\n        { \"bone\": \"rightMiddleProximal\", \"nodeNames\": [\"\u53F3\u4E2D\u6307\uFF11\", \"middle1_R\"] },\n        { \"bone\": \"rightMiddleIntermediate\", \"nodeNames\": [\"\u53F3\u4E2D\u6307\uFF12\", \"middle2_R\"] },\n        { \"bone\": \"rightMiddleDistal\", \"nodeNames\": [\"\u53F3\u4E2D\u6307\uFF13\", \"middle3_R\"] },\n        { \"bone\": \"rightRingProximal\", \"nodeNames\": [\"\u53F3\u85AC\u6307\uFF11\", \"third1_R\"] },\n        { \"bone\": \"rightRingIntermediate\", \"nodeNames\": [\"\u53F3\u85AC\u6307\uFF12\", \"third2_R\"] },\n        { \"bone\": \"rightRingDistal\", \"nodeNames\": [\"\u53F3\u85AC\u6307\uFF13\", \"third3_R\"] },\n        { \"bone\": \"rightLittleProximal\", \"nodeNames\": [\"\u53F3\u5C0F\u6307\uFF11\", \"little1_R\"] },\n        { \"bone\": \"rightLittleIntermediate\", \"nodeNames\": [\"\u53F3\u5C0F\u6307\uFF12\", \"little2_R\"] },\n        { \"bone\": \"rightLittleDistal\", \"nodeNames\": [\"\u53F3\u5C0F\u6307\uFF13\", \"little3_R\"] },\n    ];\n    blendShapeMap = {\n        \"A\": \"\u3042\",\n        \"I\": \"\u3044\",\n        \"U\": \"\u3046\",\n        \"E\": \"\u3048\",\n        \"O\": \"\u304A\",\n        \"BLINK\": \"\u307E\u3070\u305F\u304D\",\n    };\n    rotationOffsets = {\n        \"leftUpperArm\": -38 * THREE.MathUtils.DEG2RAD,\n        \"rightUpperArm\": 38 * THREE.MathUtils.DEG2RAD,\n    };\n    ikConfigs = [\n        { target: \"\u5DE6\u8DB3\uFF29\uFF2B\", bones: [`leftFoot`, 'leftLowerLeg', 'leftUpperLeg'] },\n        { target: \"\u53F3\u8DB3\uFF29\uFF2B\", bones: [`rightFoot`, 'rightLowerLeg', 'rightUpperLeg'] },\n        { target: \"\u5DE6\u3064\u307E\u5148\uFF29\uFF2B\", parent: 0, bones: [`leftToes`, `leftFoot`] },\n        { target: \"\u53F3\u3064\u307E\u5148\uFF29\uFF2B\", parent: 1, bones: [`rightToes`, `rightFoot`] },\n    ];\n    boneConstraints: Record<string, any> = {\n        'leftLowerLeg': { min: new THREE.Vector3(-175 * Math.PI / 180, 0, 0), max: new THREE.Vector3(0, 0, 0) },\n        'rightLowerLeg': { min: new THREE.Vector3(-175 * Math.PI / 180, 0, 0), max: new THREE.Vector3(0, 0, 0) },\n        'leftUpperLeg': { min: new THREE.Vector3(-Math.PI / 2, -Math.PI / 2, -Math.PI / 2), max: new THREE.Vector3(Math.PI, Math.PI / 2, Math.PI / 2) },\n        'rightUpperLeg': { min: new THREE.Vector3(-Math.PI / 2, -Math.PI / 2, -Math.PI / 2), max: new THREE.Vector3(Math.PI, Math.PI / 2, Math.PI / 2) },\n    };\n\n    async load(url: string, vrm: VRMAvatar, options: any): Promise<THREE.AnimationClip> {\n        /** @ts-ignore */\n        let { MMDLoader } = await import('https://threejs.org/examples/jsm/loaders/MMDLoader.js');\n        /** @ts-ignore */\n        let { CCDIKSolver } = await import('https://threejs.org/examples/jsm/animation/CCDIKSolver.js');\n        let loader = new MMDLoader();\n\n        let nameMap: Record<string, string> = {};\n        for (let m of this.boneMapping) {\n            let boneObj = vrm.bones[m.bone];\n            if (boneObj) {\n                for (let name of m.nodeNames) {\n                    nameMap[name] = boneObj.name;\n                }\n            }\n        }\n        let rotationOffsets: Record<string, THREE.Quaternion> = {};\n        let boneTransforms: Record<string, [number, number]> = {};\n        for (let [name, r] of Object.entries(this.rotationOffsets)) {\n            let boneObj = vrm.bones[name];\n            if (boneObj) {\n                rotationOffsets[boneObj.name] = new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(0, 0, 1), r);\n                boneObj.traverse(o => {\n                    boneTransforms[o.name] = [Math.cos(r), Math.sin(r)]; // TODO matrix\n                });\n            }\n        }\n        let morphTargetDictionary: Record<string, string> = {};\n        for (let [name, morph] of Object.entries(this.blendShapeMap)) {\n            let b = vrm.blendShapes[name];\n            if (b) {\n                morphTargetDictionary[morph] = name;\n            }\n        }\n\n        /** @ts-ignore */\n        vrm.model.morphTargetDictionary = morphTargetDictionary;\n        let scale = 0.08; // MMD unit: 8cm\n        let rotY = (p: number[], t: number[]) => {\n            [p[0], p[2]] = [\n                p[0] * t[0] - p[2] * t[1],\n                p[0] * t[1] + p[2] * t[0]\n            ];\n        };\n        let rotZ = (p: number[], t: number[]) => {\n            [p[0], p[1]] = [\n                p[0] * t[0] - p[1] * t[1],\n                p[0] * t[1] + p[1] * t[0]\n            ];\n        };\n        let rot = new THREE.Quaternion();\n        let rot2 = new THREE.Quaternion();\n        return await new Promise((resolve, reject) => {\n            loader.loadVMD(url, async (vmd: { motions: any[] }) => {\n                // Cancel lower body rotation\n                let lowerBody = vmd.motions.filter(m => m.boneName == \"\u4E0B\u534A\u8EAB\");\n                if (lowerBody.length) {\n                    lowerBody.sort((a, b) => a.frameNum - b.frameNum);\n                    let update = (target: any[], inv: boolean) => {\n                        target.sort((a, b) => a.frameNum - b.frameNum);\n                        let i = 0;\n                        for (let m of target) {\n                            while (i < lowerBody.length - 1 && m.frameNum > lowerBody[i].frameNum) {\n                                i++;\n                            }\n                            let r = rot2.fromArray(lowerBody[i].rotation);\n                            if (i > 0 && m.frameNum < lowerBody[i].frameNum) {\n                                let t = (m.frameNum - lowerBody[i - 1].frameNum) / (lowerBody[i].frameNum - lowerBody[i - 1].frameNum);\n                                // TOOD: bezier interpolation.\n                                r.slerp(rot.fromArray(lowerBody[i - 1].rotation), 1 - t);\n                            }\n                            if (inv) r.invert();\n                            m.rotation = rot.fromArray(m.rotation).multiply(r).toArray();\n                        }\n                    };\n                    update(vmd.motions.filter(m => m.boneName == \"\u30BB\u30F3\u30BF\u30FC\"), false);\n                    update(vmd.motions.filter(m => m.boneName == \"\u4E0A\u534A\u8EAB\"), true);\n                    lowerBody.forEach(m => m.rotation = [0, 0, 0, 1]);\n                }\n                // convert bones\n                for (let m of vmd.motions) {\n                    if (nameMap[m.boneName]) {\n                        m.boneName = nameMap[m.boneName];\n                    }\n                    let r = rotationOffsets[m.boneName];\n                    if (r) {\n                        m.rotation = rot.fromArray(m.rotation).premultiply(r).toArray();\n                    }\n                    m.position[0] *= scale;\n                    m.position[1] *= scale;\n                    m.position[2] *= scale;\n                    rotY(m.position, [-1, 0]);\n                    rotY(m.rotation, [-1, 0]);\n                    let t = boneTransforms[m.boneName];\n                    if (t) {\n                        rotZ(m.position, t);\n                        rotZ(m.rotation, t);\n                    }\n                }\n\n                if (options.enableIK) {\n                    /** @type {THREE.Bone[]} */\n                    // @ts-ignore\n                    let skeletonBones = vrm.model.skeleton.bones as any[];\n                    let getTargetBone = (config: { target: string, parent?: any, bones: any[] }) => {\n                        let targetIndex = skeletonBones.findIndex(b => b.name == config.target);\n                        if (targetIndex >= 0) {\n                            return targetIndex;\n                        }\n                        let parentObj = config.parent != null ? skeletonBones[getTargetBone(this.ikConfigs[config.parent])] : vrm.model;\n                        let dummyBone = new THREE.Bone();\n                        dummyBone.name = config.target;\n                        skeletonBones.push(dummyBone);\n                        parentObj.add(dummyBone);\n                        parentObj.updateMatrixWorld();\n                        let initPos = vrm.bones[config.bones[0]].getWorldPosition(new THREE.Vector3());\n                        dummyBone.position.copy(initPos.applyMatrix4(parentObj.matrixWorld.clone().invert()));\n\n                        // DEBUG\n                        //let geometry = new THREE.BoxGeometry(0.01, 0.01, 0.01);\n                        //let material = new THREE.MeshBasicMaterial({\n                        //\tcolor: new THREE.Color(\"red\"),\n                        //\ttransparent: true, opacity: 0.4, depthTest: false,\n                        //});\n                        //dummyBone.add(new THREE.Mesh(geometry, material));\n                        return skeletonBones.length - 1;\n                    }\n                    let iks = [];\n                    for (let config of this.ikConfigs) {\n                        // TODO: IK on/off setting from vmd.\n                        if (vmd.motions.find(m => m.boneName == config.target) == undefined) {\n                            continue;\n                        }\n                        let boneIndex = (name: string) => skeletonBones.findIndex(b => b == vrm.bones[name]);\n                        let effectorIndex = boneIndex(config.bones[0]);\n                        if (effectorIndex < 0) {\n                            continue;\n                        }\n                        let links: any[] = [];\n                        config.bones.slice(1).forEach(name => {\n                            let index = boneIndex(name);\n                            if (index >= 0) {\n                                let link: { index: number, rotationMax?: any, rotationMin?: any } = { index: index };\n                                let constraint = this.boneConstraints[name];\n                                if (constraint) {\n                                    link.rotationMax = constraint.max;\n                                    link.rotationMin = constraint.min;\n                                }\n                                links.push(link);\n                            }\n                        });\n                        let ik = {\n                            target: getTargetBone(config),\n                            effector: effectorIndex,\n                            links: links,\n                            maxAngle: 1,\n                            iteration: 4,\n                        };\n                        iks.push(ik);\n                    }\n                    if (iks.length > 0) {\n                        console.log(iks);\n                        let ikSolver = new CCDIKSolver(vrm.model, iks);\n                        vrm.setModule('MMDIK', { update: (t) => ikSolver.update() });\n                    }\n                }\n\n                let clip = loader.animationBuilder.build(vmd, vrm.model) as THREE.AnimationClip;\n                clip.tracks.forEach(tr => {\n                    let m = tr.name.match(/.morphTargetInfluences\\[(\\w+)\\]/);\n                    if (m) {\n                        let b = vrm.blendShapes[m[1]];\n                        if (b && b.binds.length > 0) {\n                            // todo clone track.\n                            tr.name = b.binds[0].target.uuid + \".morphTargetInfluences[\" + b.binds[0].index + \"]\";\n                        }\n                    }\n                });\n                resolve(clip);\n            }, () => { }, reject);\n        });\n    }\n}\n", "import { Bone } from 'three';\nimport { VRMAvatar } from '../vrm/avatar';\n\nexport class BVHLoaderWrapper {\n    protected existsPreviousThumbName = false;\n    protected legacyBoneMapping = {\n        leftThumbMetacarpal: 'leftThumbProximal',\n        leftThumbProximal: 'leftThumbIntermediate',\n        rightThumbMetacarpal: 'rightThumbProximal',\n        rightThumbProximal: 'rightThumbIntermediate'\n    };\n    public async load(url: string, avatar: VRMAvatar, options: any): Promise<THREE.AnimationClip> {\n        /** @ts-ignore */\n        this.existsPreviousThumbName = avatar.bones.leftThumbIntermediate != null || avatar.bones.rightThumbIntermediate != null;\n        let { BVHLoader } = await import('https://threejs.org/examples/jsm/loaders/BVHLoader.js');\n        return await new Promise((resolve, reject) => {\n            /**\n             * Viveport Note:\n             * Date: 2022/08/12\n             * Description:\n             *  The following is content of not doing cache-bvh\n             */\n            // new BVHLoader().load(url, result => {\n            //   if (options.convertBone) {\n            //     this.fixTrackName(result.clip, avatar);\n            //   }\n            //   const newClip = {\n            //     ...result.clip,\n            //     tracks: result.clip.tracks.filter(t => !t.name.match(/position/))\n            //   };\n            //   resolve(newClip);\n            // });\n            const cacheKey = url;\n            window.VRM_ANIMATIONS = window.VRM_ANIMATIONS || {};\n            if (!window.VRM_ANIMATIONS[cacheKey]) {\n                new BVHLoader().load(url, (result: any) => {\n                    window.VRM_ANIMATIONS[cacheKey] = { clip: result.clip.clone(), bones: result.skeleton.bones };\n                    resolve(this.fixTracks(result.clip, avatar, result.skeleton.bones, options));\n                });\n            } else {\n                const { clip, bones } = window.VRM_ANIMATIONS[cacheKey];\n                resolve(this.fixTracks(clip.clone(), avatar,  bones, options));\n            }\n        });\n    }\n\n    protected fixTracks(clip: THREE.AnimationClip, avatar: VRMAvatar, motionBones: Bone[], options): THREE.AnimationClip {\n        if (options.convertBone) {\n          this.fixTrackName(clip, avatar, motionBones);\n        }\n        clip.tracks = this.isLegacyMotionSkeleton(motionBones)\n        ? clip.tracks.filter(t => !t.name.match(/position/))\n        : clip.tracks.filter(t => !t.name.match(/position/) || t.name.match(avatar.bones.hips.name));        \n\n        return clip;\n    }\n\n    protected convertBoneName(name: string): string {\n        name = name.replace('Spin1', 'Spin');\n        name = name.replace('Chest1', 'Chest');\n        name = name.replace('Chest2', 'UpperChest');\n        name = name.replace('UpLeg', 'UpperLeg');\n        name = name.replace('LeftLeg', 'LeftLowerLeg');\n        name = name.replace('RightLeg', 'RightLowerLeg');\n        name = name.replace('ForeArm', 'UpperArm');\n        name = name.replace('LeftArm', 'LeftLowerArm');\n        name = name.replace('RightArm', 'RightLowerArm');\n        name = name.replace('Collar', 'Shoulder');\n        name = name.replace('Elbow', 'LowerArm');\n        name = name.replace('Wrist', 'Hand');\n        name = name.replace('LeftHip', 'LeftUpperLeg');\n        name = name.replace('RightHip', 'RightUpperLeg');\n        name = name.replace('Knee', 'LowerLeg');\n        name = name.replace('Ankle', 'Foot');\n        if (this.existsPreviousThumbName) {\n            const newName = this.legacyBoneMapping[name];\n            if (newName)\n                name = name.replace(name, newName);\n            // name = name.replace(\"leftThumbMetacarpal\", \"leftThumbProximal\");\n            // name = name.replace(\"leftThumbProximal\", \"leftThumbIntermediate\");\n            // name = name.replace(\"rightThumbMetacarpal\", \"rightThumbProximal\");\n            // name = name.replace(\"rightThumbProximal\", \"rightThumbIntermediate\");\n        }        \n        return name.charAt(0).toLowerCase() + name.slice(1);\n    }\n\n    protected isLegacyMotionSkeleton(motionBones: Bone[]): boolean {\n        return motionBones.filter(b => b.name == \"hips\" || b.name == \"upperChest\").length != 2;\n    }    \n\n    protected fixTrackName(clip: THREE.AnimationClip, avatar: VRMAvatar, motionBones: Bone[]): void {\n        const _vec3 = new THREE.Vector3();\n        const motionHipsHeight = (motionBones.find(b => b.name == \"hips\")?.position.y || 0) * 2.005; // TODO: should try to figure out the root cause of the magic number 2.005\n        const vrmHipsY = avatar.bones.hips?.getWorldPosition(_vec3).y;\n        const vrmRootY = avatar.model.getWorldPosition(_vec3).y;\n        const vrmHipsHeight = Math.abs( vrmHipsY - vrmRootY );\n        const hipsPositionScale = (!this.isLegacyMotionSkeleton(motionBones)) ? (vrmHipsHeight / motionHipsHeight) : 0.09;\n\n        clip.tracks.forEach(t => {\n            // '.bones[Chest].quaternion'\n            t.name = t.name.replace(/bones\\[(\\w+)\\]/, (m, name) => {\n                let bone = avatar.bones[this.convertBoneName(name)];\n                return 'bones[' + (bone != null ? bone.name : 'NODE_NOT_FOUND') + ']';\n            });\n            t.name = t.name.replace('ToeBase', 'Foot');\n            if (t.name.match(/quaternion/)) {\n                t.values = t.values.map((v, i) => i % 2 === 0 ? -v : v);\n            }\n            if (t.name.match(/position/)) {\n                t.values = t.values.map((v, i) => (i % 3 === 1 ? v : -v) * hipsPositionScale);\n            }\n        });\n        clip.tracks = clip.tracks.filter(t => !t.name.match(/NODE_NOT_FOUND/));\n    }\n}\n", "// @ts-nocheck\nimport { VRMAvatar, VRMLoader } from \"./vrm/avatar\";\nimport { VRMPhysicsCannonJS } from \"./utils/physics-cannon\";\nimport { IKNode, IKSolver } from \"./utils/simpleik\";\nimport { VMDLoaderWrapper } from \"./utils/vmd\";\nimport { BVHLoaderWrapper } from \"./utils/bvh\";\nconst VRM_POSE_A = {\n    bones: [\n      {\n        name: \"hips\",\n        q: [0, 0, 0, 1]\n      },\n      {\n        name: \"leftUpperLeg\",\n        q: [0, 0, 0, 1]\n      },\n      {\n        name: \"rightUpperLeg\",\n        q: [0, 0, 0, 1]\n      },\n      {\n        name: \"leftLowerLeg\",\n        q: [0, 0, 0, 1]\n      },\n      {\n        name: \"rightLowerLeg\",\n        q: [0, 0, 0, 1]\n      },\n      {\n        name: \"leftFoot\",\n        q: [0, 0, 0, 1]\n      },\n      {\n        name: \"rightFoot\",\n        q: [0, 0, 0, 1]\n      },\n      {\n        name: \"spine\",\n        q: [0, 0, 0, 1]\n      },\n      {\n        name: \"chest\",\n        q: [0, 0, 0, 1]\n      },\n      {\n        name: \"neck\",\n        q: [0, 0, 0, 1]\n      },\n      {\n        name: \"head\",\n        q: [0.06085100730464933, -0.02202995606372791, 0, 0.9979037207796351]\n      },\n      {\n        name: \"leftShoulder\",\n        q: [0, 0, 0, 1]\n      },\n      {\n        name: \"rightShoulder\",\n        q: [0, 0, 0, 1]\n      },\n      {\n        name: \"leftUpperArm\",\n        q: [-0.0039010895844694173, -0.1543204839727681, 0.539642514262409, 0.8276206416752847]\n      },\n      {\n        name: \"rightUpperArm\",\n        q: [0.009326220145646762, 0.1736606185406724, -0.5211727795846239, 0.8355441011735436]\n      },\n      {\n        name: \"leftLowerArm\",\n        q: [0.056406304529277126, -0.017647952075557537, 0.005438403159162174, 0.9982370972709678]\n      },\n      {\n        name: \"rightLowerArm\",\n        q: [0.054974313124661875, 0.02083301559003829, 0.0050595917092329966, 0.9982575874440588]\n      },\n      {\n        name: \"leftHand\",\n        q: [0, 0, 0, 1]\n      },\n      {\n        name: \"rightHand\",\n        q: [0, 0, 0, 1]\n      },\n      {\n        name: \"leftToes\",\n        q: [0, 0, 0, 1]\n      },\n      {\n        name: \"rightToes\",\n        q: [0, 0, 0, 1]\n      },\n      {\n        name: \"leftEye\",\n        q: [0, 0, 0, 1]\n      },\n      {\n        name: \"rightEye\",\n        q: [0, 0, 0, 1]\n      },\n      {\n        name: \"jaw\",\n        q: [0, 0, 0, 1]\n      },\n      {\n        name: \"leftThumbProximal\",\n        q: [0, 0, 0, 1]\n      },\n      {\n        name: \"leftThumbIntermediate\",\n        q: [0, 0, 0, 1]\n      },\n      {\n        name: \"leftThumbDistal\",\n        q: [0, 0, 0, 1]\n      },\n      {\n        name: \"leftIndexProximal\",\n        q: [0, 0, 0, 1]\n      },\n      {\n        name: \"leftIndexIntermediate\",\n        q: [0, 0, 0, 1]\n      },\n      {\n        name: \"leftIndexDistal\",\n        q: [0, 0, 0, 1]\n      },\n      {\n        name: \"leftMiddleProximal\",\n        q: [0, 0, 0, 1]\n      },\n      {\n        name: \"leftMiddleIntermediate\",\n        q: [0, 0, 0, 1]\n      },\n      {\n        name: \"leftMiddleDistal\",\n        q: [0, 0, 0, 1]\n      },\n      {\n        name: \"leftRingProximal\",\n        q: [0, 0, 0, 1]\n      },\n      {\n        name: \"leftRingIntermediate\",\n        q: [0, 0, 0, 1]\n      },\n      {\n        name: \"leftRingDistal\",\n        q: [0, 0, 0, 1]\n      },\n      {\n        name: \"leftLittleProximal\",\n        q: [0, 0, 0, 1]\n      },\n      {\n        name: \"leftLittleIntermediate\",\n        q: [0, 0, 0, 1]\n      },\n      {\n        name: \"leftLittleDistal\",\n        q: [0, 0, 0, 1]\n      },\n      {\n        name: \"rightThumbProximal\",\n        q: [0, 0, 0, 1]\n      },\n      {\n        name: \"rightThumbIntermediate\",\n        q: [0, 0, 0, 1]\n      },\n      {\n        name: \"rightThumbDistal\",\n        q: [0, 0, 0, 1]\n      },\n      {\n        name: \"rightIndexProximal\",\n        q: [0, 0, 0, 1]\n      },\n      {\n        name: \"rightIndexIntermediate\",\n        q: [0, 0, 0, 1]\n      },\n      {\n        name: \"rightIndexDistal\",\n        q: [0, 0, 0, 1]\n      },\n      {\n        name: \"rightMiddleProximal\",\n        q: [0, 0, 0, 1]\n      },\n      {\n        name: \"rightMiddleIntermediate\",\n        q: [0, 0, 0, 1]\n      },\n      {\n        name: \"rightMiddleDistal\",\n        q: [0, 0, 0, 1]\n      },\n      {\n        name: \"rightRingProximal\",\n        q: [0, 0, 0, 1]\n      },\n      {\n        name: \"rightRingIntermediate\",\n        q: [0, 0, 0, 1]\n      },\n      {\n        name: \"rightRingDistal\",\n        q: [0, 0, 0, 1]\n      },\n      {\n        name: \"rightLittleProximal\",\n        q: [0, 0, 0, 1]\n      },\n      {\n        name: \"rightLittleIntermediate\",\n        q: [0, 0, 0, 1]\n      },\n      {\n        name: \"rightLittleDistal\",\n        q: [0, 0, 0, 1]\n      },\n      {\n        name: \"upperChest\",\n        q: [0, 0, 0, 1]\n      }\n    ],\n    blendShape: [\n      {\n        name: \"NEUTRAL\",\n        value: 0\n      },\n      {\n        name: \"A\",\n        value: 0\n      },\n      {\n        name: \"I\",\n        value: 0\n      },\n      {\n        name: \"U\",\n        value: 0\n      },\n      {\n        name: \"E\",\n        value: 0\n      },\n      {\n        name: \"O\",\n        value: 0\n      },\n      {\n        name: \"BLINK\",\n        value: 0\n      },\n      {\n        name: \"JOY\",\n        value: 0\n      },\n      {\n        name: \"ANGRY\",\n        value: 0\n      },\n      {\n        name: \"SORROW\",\n        value: 0\n      },\n      {\n        name: \"FUN\",\n        value: 0\n      },\n      {\n        name: \"LOOKUP\",\n        value: 0\n      },\n      {\n        name: \"LOOKDOWN\",\n        value: 0\n      },\n      {\n        name: \"LOOKLEFT\",\n        value: 0\n      },\n      {\n        name: \"LOOKRIGHT\",\n        value: 0\n      },\n      {\n        name: \"BLINK_L\",\n        value: 0\n      },\n      {\n        name: \"BLINK_R\",\n        value: 0\n      }\n    ]\n  };\n  \n\nAFRAME.registerComponent('vrm', {\n    schema: {\n        src: { default: '' },\n        firstPerson: { default: false },\n        blink: { default: true },\n        blinkInterval: { default: 5 },\n        lookAt: { type: 'selector' },\n        enablePhysics: { default: false },\n    },\n    init() {\n        this.avatar = null;\n    },\n    update(oldData) {\n        if (this.data.src !== oldData.src) {\n            this.remove();\n            this._loadAvatar();\n        }\n        this._updateAvatar();\n    },\n    tick(time, timeDelta) {\n        if (!this.avatar) {\n            this.pause();\n            return;\n        }\n        this.avatar.update(timeDelta / 1000);\n    },\n    remove() {\n        if (this.avatar) {\n            this.el.removeObject3D('avatar');\n            this.avatar.dispose();\n        }\n    },\n    async _loadAvatar() {\n        let el = this.el;\n        let url = this.data.src;\n        if (!url) {\n            return;\n        }\n        try {\n            let moduleSpecs = [];\n            if (globalThis.CANNON) {\n                moduleSpecs.push({ name: 'physics', instantiate: (a, ctx) => new VRMPhysicsCannonJS(ctx) });\n            }\n            let avatar = await new VRMLoader().load(url, moduleSpecs);\n            if (url != this.data.src) {\n                avatar.dispose();\n                return;\n            }\n            this.avatar = avatar;\n            el.setObject3D('avatar', avatar.model);\n            this._updateAvatar();\n            this.play();\n            el.emit('model-loaded', { format: 'vrm', model: avatar.model, avatar: avatar }, false);\n        } catch (e) {\n            console.error('vrm model-error', e);\n            el.emit('model-error', { format: 'vrm', src: url, cause: e }, false);\n        }\n    },\n    _updateAvatar() {\n        if (!this.avatar) {\n            return;\n        }\n        let data = this.data;\n        this.avatar.setFirstPerson(data.firstPerson);\n        if (data.lookAt) {\n            if (data.lookAt.tagName == 'A-CAMERA') {\n                this.avatar.lookAtTarget = this.el.sceneEl.camera;\n            } else {\n                this.avatar.lookAtTarget = data.lookAt.object3D;\n            }\n        } else {\n            this.avatar.lookAtTarget = null;\n        }\n        if (data.blink) {\n            this.avatar.startBlink(data.blinkInterval);\n        } else {\n            this.avatar.stopBlink();\n        }\n        /** @type {VRMPhysicsCannonJS} */\n        let physics = this.avatar.modules.physics;\n        if (physics) {\n            if (data.enablePhysics && physics.world == null) {\n                let engine = this.el.sceneEl.systems.physics;\n                // @ts-ignore\n                physics.attach(engine && engine.driver && engine.driver.world);\n            }\n            physics.enable = data.enablePhysics;\n        }\n    }\n});\n\nAFRAME.registerComponent('vrm-anim', {\n    schema: {\n        src: { default: '' },\n        format: { default: '' },\n        loop: { default: true },\n        enableIK: { default: true },\n        convertBone: { default: true },\n        defaultMotion: { default: '' }\n    },\n    init() {\n        /** @type {VRMAvatar} */\n        this.avatar = null;\n        if (this.el.components.vrm && this.el.components.vrm.avatar) {\n            this.avatar = this.el.components.vrm.avatar;\n        }\n        this.onVrmLoaded = (ev) => {\n            this.avatar = ev.detail.avatar;\n            if (this.data.src != '') {\n                this._loadClip(this.data.src);\n            } else if (this.avatar.animations.length > 0) {\n                this.playClip(this.avatar.animations[0]);\n            } else {\n                this.playTestMotion();\n            }\n        };\n        this.el.addEventListener('model-loaded', this.onVrmLoaded);\n    },\n    update(oldData) {\n        if (oldData.src != this.data.src && this.avatar) {\n            this._loadClip(this.data.src);\n        }\n    },\n    /**\n     * \n     * @param {string} url \n     * @returns \n     */\n    async _loadClip(url) {\n        this.stopAnimation();\n        this.avatar.setPose(VRM_POSE_A);\n        // this.avatar.restPose();\n        if (url === '') {\n            return;\n        }\n        let loop = this.data.loop ? THREE.LoopRepeat : THREE.LoopOnce;\n        let format = this.data.format || (url.toLowerCase().endsWith('.bvh') ? 'bvh' : '');\n        let loader = format == 'bvh' ? new BVHLoaderWrapper() : new VMDLoaderWrapper()\n        let clip = await loader.load(url, this.avatar, this.data);\n        if (!this.avatar) {\n            return;\n        }\n        this.playClip(clip);\n    },\n    stopAnimation() {\n        if (this.animation) {\n            this.animation.stop();\n            // this.avatar.mixer.uncacheClip(this.clip);\n            this.avatar.removeModule('MMDIK');\n            this.animation = null;\n        }\n    },\n    playTestMotion() {\n        if(this.data.defaultMotion) {\n            this._loadClip(this.data.defaultMotion);\n            return\n        }\n        let q = (x, y, z) => new THREE.Quaternion().setFromEuler(new THREE.Euler(x * Math.PI / 180, y * Math.PI / 180, z * Math.PI / 180));\n        let tracks = {\n            leftUpperArm: {\n                keys: [\n                    { rot: q(0, 0, 65), time: 0 },\n                    { rot: q(0, 0, 63), time: 1 },\n                    { rot: q(0, 0, 65), time: 2 },\n                ]\n            },\n            rightUpperArm: {\n                keys: [\n                    { rot: q(0, 0, -65), time: 0 },\n                    { rot: q(0, 0, -60), time: 1 },\n                    { rot: q(0, 0, -65), time: 2 },\n                ]\n            },\n            spine: {\n                keys: [\n                    { rot: q(0, 2, 0), time: 0 },\n                    { rot: q(2, 0, -2), time: 1 },\n                    { rot: q(2, -2, 0), time: 2 },\n                    { rot: q(0, 0, 2), time: 3 },\n                    { rot: q(0, 2, 0), time: 4 },\n                ]\n            }\n        };\n        let clip = THREE.AnimationClip.parseAnimation(\n            {\n                name: 'testAnimation',\n                hierarchy: Object.values(tracks),\n            },\n            Object.keys(tracks).map(k => this.avatar.bones[k] || { name: k })\n        );\n        this.playClip(clip);\n    },\n    playClip(clip) {\n        let loop = this.data.loop ? THREE.LoopRepeat : THREE.LoopOnce;\n        this.stopAnimation();\n        this.clip = clip;\n        // this.avatar.mixer.setTime(0);\n        this.animation = this.avatar.mixer.clipAction(clip).setLoop(loop).setEffectiveWeight(1.0).play();\n        this.animation.clampWhenFinished = true;\n    },\n    remove() {\n        this.el.removeEventListener('model-loaded', this.onVrmLoaded);\n        this.stopAnimation();\n        this.avatar = null;\n    }\n});\n\nAFRAME.registerComponent('vrm-skeleton', {\n    schema: {\n        physicsOffset: { type: 'vec3', default: { x: 0, y: 0, z: 0 } },\n    },\n    init() {\n        this.physicsBodies = [];\n        this.sceneObj = this.el.sceneEl.object3D;\n        if (this.el.components.vrm && this.el.components.vrm.avatar) {\n            this._onAvatarUpdated(this.el.components.vrm.avatar);\n        }\n        this.onVrmLoaded = (ev) => this._onAvatarUpdated(ev.detail.avatar);\n        this.el.addEventListener('model-loaded', this.onVrmLoaded);\n    },\n    _onAvatarUpdated(avatar) {\n        if (this.helper) {\n            this.sceneObj.remove(this.helper);\n        }\n        this.helper = new THREE.SkeletonHelper(avatar.model);\n        this.sceneObj.add(this.helper);\n        this._updatePhysicsBody(avatar);\n    },\n    _updatePhysicsBody(avatar) {\n        this._clearPhysicsBody();\n        /** @type {VRMPhysicsCannonJS} */\n        let physics = avatar.modules.physics;\n        if (!physics || !physics.world) {\n            return;\n        }\n        let geometry = new THREE.SphereGeometry(1, 6, 3);\n        let material = new THREE.MeshBasicMaterial({ color: new THREE.Color(\"red\"), wireframe: true, depthTest: false });\n        physics.bodies.forEach(body => {\n            let obj = new THREE.Group();\n            body.shapes.forEach((shape, i) => {\n                let sphere = new THREE.Mesh(geometry, material);\n                sphere.position.copy(body.shapeOffsets[i]);\n                sphere.scale.multiplyScalar(shape.boundingSphereRadius || 0.01);\n                obj.add(sphere);\n\n            });\n            this.sceneObj.add(obj);\n            this.physicsBodies.push([body, obj]);\n        });\n    },\n    _clearPhysicsBody() {\n        this.physicsBodies.forEach(([body, obj]) => obj.parent.remove(obj));\n        this.physicsBodies = [];\n    },\n    tick() {\n        this.physicsBodies.forEach(([body, obj]) => {\n            obj.position.copy(body.position).add(this.data.physicsOffset);\n            obj.quaternion.copy(body.quaternion);\n        });\n    },\n    remove() {\n        this.el.removeEventListener('model-loaded', this.onVrmLoaded);\n        this._clearPhysicsBody();\n        if (this.helper) {\n            this.sceneObj.remove(this.helper);\n        }\n    }\n});\n\nAFRAME.registerComponent('vrm-poser', {\n    schema: {\n        color: { default: '#00ff00' },\n        enableConstraints: { default: true },\n    },\n    init() {\n        this.binds = [];\n        this._tmpV0 = new THREE.Vector3();\n        this._tmpV1 = new THREE.Vector3();\n        this._tmpQ0 = new THREE.Quaternion();\n        this._tmpQ1 = new THREE.Quaternion();\n        this._tmpM0 = new THREE.Matrix4();\n        if (this.el.components.vrm && this.el.components.vrm.avatar) {\n            this._onAvatarUpdated(this.el.components.vrm.avatar);\n        }\n        this.onVrmLoaded = (ev) => this._onAvatarUpdated(ev.detail.avatar);\n        this.el.addEventListener('model-loaded', this.onVrmLoaded);\n    },\n    remove() {\n        this.el.removeEventListener('model-loaded', this.onVrmLoaded);\n        this._removeHandles();\n    },\n    getPoseData(exportMorph) {\n        if (!this.avatar) {\n            return;\n        }\n        return this.avatar.getPose(exportMorph);\n    },\n    setPoseData(pose) {\n        if (!this.avatar) {\n            return;\n        }\n        this.avatar.setPose(pose);\n        this._updateHandlePosition();\n    },\n    _onAvatarUpdated(avatar) {\n        this._removeHandles();\n        this.avatar = avatar;\n        let geometry = new THREE.BoxGeometry(1, 1, 1);\n        let material = new THREE.MeshBasicMaterial({\n            color: new THREE.Color(this.data.color),\n            transparent: true, opacity: 0.4, depthTest: false,\n        });\n        let _v0 = this._tmpV0, _v1 = this._tmpV1, _m = this._tmpM0, _q = this._tmpQ0;\n        let rootNode = avatar.bones['hips'];\n        let boneNameByUUID = {};\n        for (let name of Object.keys(avatar.bones)) {\n            let bone = avatar.bones[name];\n            let isRoot = bone == rootNode;\n            let cube = new THREE.Mesh(geometry, material);\n            let targetEl = document.createElement('a-entity');\n            targetEl.classList.add('collidable');\n            targetEl.setAttribute('xy-drag-control', {});\n            targetEl.setObject3D('handle', cube);\n            let targetObject = targetEl.object3D;\n            let minDist = bone.children.reduce((d, b) => Math.min(d, b.position.length()), bone.position.length());\n            targetObject.scale.multiplyScalar(Math.max(Math.min(minDist / 2, 0.05), 0.01));\n            boneNameByUUID[bone.uuid] = name;\n            targetEl.addEventListener('mousedown', ev => {\n                this.el.emit('vrm-poser-select', { name: name, node: bone });\n            });\n            let parentBone = bone.parent;\n            while (!boneNameByUUID[parentBone.uuid] && parentBone.parent && parentBone.parent.isBone) {\n                parentBone = parentBone.parent;\n            }\n            targetEl.addEventListener('xy-drag', ev => {\n                if (isRoot) {\n                    // TODO\n                    let d = targetObject.parent.worldToLocal(bone.getWorldPosition(_v0)).sub(targetObject.position)\n                    avatar.model.position.sub(d);\n                }\n                parentBone.updateMatrixWorld(false);\n                targetObject.updateMatrixWorld(false);\n                _m.getInverse(parentBone.matrixWorld).multiply(targetObject.matrixWorld).decompose(_v1, _q, _v0);\n                bone.quaternion.copy(this._applyConstraintQ(name, _q));\n                _q.setFromUnitVectors(_v0.copy(bone.position).normalize(), _v1.normalize());\n                if (parentBone.children.length == 1) {\n                    parentBone.quaternion.multiply(_q);\n                    this._applyConstraintQ(boneNameByUUID[parentBone.uuid], parentBone.quaternion)\n                }\n                this._updateHandlePosition(isRoot ? null : bone);\n            });\n            targetEl.addEventListener('xy-dragend', ev => {\n                this._updateHandlePosition();\n                console.log(parentBone.name, name);\n            });\n            this.el.appendChild(targetEl);\n            this.binds.push([bone, targetObject]);\n        }\n        this._updateHandlePosition();\n    },\n    _applyConstraintQ(name, q) {\n        if (!this.data.enableConstraints) {\n            return q;\n        }\n        let _q = this._tmpQ1, _v = this._tmpV0;\n        let constraint = this.avatar.boneConstraints[name];\n        if (constraint && constraint.type == 'ball') {\n            let angle = 2 * Math.acos(q.w);\n            if (constraint.twistAxis) {\n                let tangle = angle * Math.acos(q.w) * _v.copy(q).normalize().dot(constraint.twistAxis); // TODO\n                tangle = this._normalizeAngle(tangle);\n                if (Math.abs(tangle) > constraint.twistLimit) {\n                    let e = tangle < 0 ? (tangle + constraint.twistLimit) : (tangle - constraint.twistLimit);\n                    q.multiply(_q.setFromAxisAngle(constraint.twistAxis, -e));\n                    angle = 2 * Math.acos(q.w);\n                }\n            }\n            if (Math.abs(this._normalizeAngle(angle)) > constraint.limit) {\n                q.setFromAxisAngle(_v.copy(q).normalize(), constraint.limit);\n            }\n        } else if (constraint && constraint.type == 'hinge') {\n            let m = (constraint.min + constraint.max) / 2;\n            let angle = 2 * Math.acos(q.w) * _v.copy(q).normalize().dot(constraint.axis); // TODO\n            angle = THREE.MathUtils.clamp(this._normalizeAngle(angle - m), constraint.min - m, constraint.max - m);\n            q.setFromAxisAngle(constraint.axis, angle + m);\n        }\n        return q;\n    },\n    _normalizeAngle(angle) {\n        return angle - Math.PI * 2 * Math.floor((angle + Math.PI) / (Math.PI * 2));\n    },\n    _removeHandles() {\n        this.binds.forEach(([b, t]) => {\n            this.el.removeChild(t.el);\n            let obj = t.el.getObject3D('handle');\n            if (obj) {\n                obj.material.dispose();\n                obj.geometry.dispose();\n            }\n            t.el.destroy();\n        });\n        this.binds = [];\n    },\n    _updateHandlePosition(skipNode) {\n        let _v = this._tmpV0;\n        let container = this.el.object3D;\n        container.updateMatrixWorld(false);\n        let base = container.matrixWorld.clone().invert();\n        this.binds.forEach(([node, target]) => {\n            let pos = node == skipNode ? _v : target.position;\n            node.updateMatrixWorld(false);\n            target.matrix.copy(node.matrixWorld).premultiply(base).decompose(pos, target.quaternion, _v);\n        });\n    }\n});\n\nAFRAME.registerComponent('vrm-mimic', {\n    schema: {\n        leftHandTarget: { type: 'selector', default: '' },\n        leftHandOffsetPosition: { type: 'vec3' },\n        leftHandOffsetRotation: { type: 'vec3', default: { x: 0, y: -Math.PI / 2, z: 0 } },\n        rightHandTarget: { type: 'selector', default: '' },\n        rightHandOffsetPosition: { type: 'vec3' },\n        rightHandOffsetRotation: { type: 'vec3', default: { x: 0, y: Math.PI / 2, z: 0 } },\n        leftLegTarget: { type: 'selector', default: '' },\n        rightLegTarget: { type: 'selector', default: '' },\n        headTarget: { type: 'selector', default: '' },\n        avatarOffset: { type: 'vec3', default: { x: 0, y: 0, z: 0 } },\n    },\n    init() {\n        this._tmpV0 = new THREE.Vector3();\n        this._tmpV1 = new THREE.Vector3();\n        this._tmpQ0 = new THREE.Quaternion();\n        this._tmpQ1 = new THREE.Quaternion();\n        this._tmpM0 = new THREE.Matrix4();\n        this.targetEls = [];\n        if (this.el.components.vrm && this.el.components.vrm.avatar) {\n            this._onAvatarUpdated(this.el.components.vrm.avatar);\n        }\n        this.onVrmLoaded = (ev) => this._onAvatarUpdated(ev.detail.avatar);\n        this.el.addEventListener('model-loaded', this.onVrmLoaded);\n    },\n    update() {\n        if (this.data.headTarget) {\n            if (this.data.headTarget.tagName == 'A-CAMERA') {\n                this.headTarget = this.el.sceneEl.camera;\n            } else {\n                this.headTarget = this.data.headTarget.object3D;\n            }\n        } else {\n            this.headTarget = null;\n        }\n\n        this.rightHandOffset = new THREE.Matrix4().compose(\n            this.data.rightHandOffsetPosition,\n            new THREE.Quaternion().setFromEuler(new THREE.Euler().setFromVector3(this.data.rightHandOffsetRotation)),\n            new THREE.Vector3(1, 1, 1));\n        this.leftHandOffset = new THREE.Matrix4().compose(\n            this.data.leftHandOffsetPosition,\n            new THREE.Quaternion().setFromEuler(new THREE.Euler().setFromVector3(this.data.leftHandOffsetRotation)),\n            new THREE.Vector3(1, 1, 1));\n    },\n    _onAvatarUpdated(avatar) {\n        this.avatar = avatar;\n        for (let el of this.targetEls) {\n            this.el.removeChild(el);\n        }\n        this.targetEls = [];\n        this.update();\n        this.startAvatarIK_simpleIK(avatar);\n    },\n    startAvatarIK_simpleIK(avatar) {\n        let solver = new IKSolver();\n        this.qbinds = [];\n        let setupIkChain = (boneNames, targetEl, offset) => {\n            if (targetEl == null) {\n                targetEl = document.createElement('a-box');\n                targetEl.classList.add('collidable');\n                targetEl.setAttribute('xy-drag-control', {});\n                targetEl.setAttribute('geometry', { width: 0.05, depth: 0.05, height: 0.05 });\n                targetEl.setAttribute('material', { color: 'blue', depthTest: false, transparent: true, opacity: 0.4 });\n                this.el.appendChild(targetEl);\n                this.targetEls.push(targetEl);\n            }\n            let pos = (b, p) => p.worldToLocal(b.getWorldPosition(new THREE.Vector3()));\n            boneNames = boneNames.filter(name => avatar.bones[name]);\n            let boneList = boneNames.map(name => avatar.bones[name]);\n            let bones = boneList.map((b, i) => {\n                let position = i == 0 ? b.position : pos(b, boneList[i - 1]);\n                let constraintConf = avatar.boneConstraints[boneNames[i]];\n                let constraint = constraintConf ? {\n                    apply: ikbone => {\n                        return this._applyConstraintQ(constraintConf, ikbone.quaternion);\n                    }\n                } : null;\n                return new IKNode(position, constraint, b);\n            });\n            this.qbinds.push([boneList[boneList.length - 1], targetEl.object3D, offset]);\n            return { root: boneList[0], ikbones: bones, bones: boneList, target: targetEl.object3D };\n        };\n\n        this.chains = [\n            setupIkChain(['leftUpperArm', 'leftLowerArm', 'leftHand'], this.data.leftHandTarget, this.leftHandOffset),\n            setupIkChain(['rightUpperArm', 'rightLowerArm', 'rightHand'], this.data.rightHandTarget, this.rightHandOffset),\n            setupIkChain(['leftUpperLeg', 'leftLowerLeg', 'leftFoot'], this.data.leftLegTarget),\n            setupIkChain(['rightUpperLeg', 'rightLowerLeg', 'rightFoot'], this.data.rightLegTarget),\n        ];\n\n        this.simpleIK = solver;\n    },\n    _applyConstraintQ(constraint, q) {\n        let _q = this._tmpQ1, _v = this._tmpV0, fixed = false;;\n        if (constraint && constraint.type == 'ball') {\n            let angle = 2 * Math.acos(q.w);\n            if (constraint.twistAxis) {\n                let tangle = angle * Math.acos(q.w) * _v.copy(q).normalize().dot(constraint.twistAxis); // TODO\n                tangle = this._normalizeAngle(tangle);\n                if (Math.abs(tangle) > constraint.twistLimit) {\n                    let e = tangle < 0 ? (tangle + constraint.twistLimit) : (tangle - constraint.twistLimit);\n                    q.multiply(_q.setFromAxisAngle(constraint.twistAxis, -e));\n                    angle = 2 * Math.acos(q.w);\n                    fixed = true;\n                }\n            }\n            if (Math.abs(this._normalizeAngle(angle)) > constraint.limit) {\n                q.setFromAxisAngle(_v.copy(q).normalize(), constraint.limit);\n                fixed = true;\n            }\n        } else if (constraint && constraint.type == 'hinge') {\n            let m = (constraint.min + constraint.max) / 2;\n            let dot = _v.copy(q).normalize().dot(constraint.axis);\n            let angle = 2 * Math.acos(q.w) * dot; // TODO\n            angle = THREE.MathUtils.clamp(this._normalizeAngle(angle - m), constraint.min - m, constraint.max - m);\n            q.setFromAxisAngle(constraint.axis, angle + m);\n            fixed = true;\n        }\n        return fixed;\n    },\n    _normalizeAngle(angle) {\n        return angle - Math.PI * 2 * Math.floor((angle + Math.PI) / (Math.PI * 2));\n    },\n    tick(time, timeDelta) {\n        if (!this.avatar) {\n            return;\n        }\n        if (this.headTarget) {\n            let position = this._tmpV0;\n            let headRot = this._tmpQ0;\n            this.headTarget.matrixWorld.decompose(position, headRot, this._tmpV1)\n            position.y = 0;\n            this.avatar.model.position.copy(position.add(this.data.avatarOffset));\n            let head = this.avatar.firstPersonBone;\n            if (head) {\n                let r = this._tmpQ1.setFromRotationMatrix(head.parent.matrixWorld).invert();\n                head.quaternion.copy(headRot.premultiply(r));\n            }\n        }\n        if (this.simpleIK) {\n            let pm = this.el.object3D.matrixWorld.clone().invert();\n            for (let chain of this.chains) {\n                // TODO: add chain.root.position\n                let baseMat = chain.root.parent.matrixWorld.clone().premultiply(pm);\n                if (this.simpleIK.solve(chain.ikbones, chain.target.position, baseMat) || true) {\n                    chain.ikbones.forEach((ikbone, i) => {\n                        if (i == chain.ikbones.length - 1) return;\n                        let a = ikbone.userData.quaternion.angleTo(ikbone.quaternion);\n                        if (a > 0.2) {\n                            ikbone.userData.quaternion.slerp(ikbone.quaternion, 0.2 / a);\n                        } else {\n                            ikbone.userData.quaternion.copy(ikbone.quaternion);\n                        }\n                    });\n\n                }\n            }\n            this.qbinds.forEach(([bone, t, offset]) => {\n                let m = offset ? t.matrixWorld.clone().multiply(offset) : t.matrixWorld;\n                let r = this._tmpQ0.setFromRotationMatrix(bone.parent.matrixWorld).invert();\n                bone.quaternion.copy(this._tmpQ1.setFromRotationMatrix(m).premultiply(r));\n            });\n        }\n    },\n    remove() {\n        this.el.removeEventListener('model-loaded', this.onVrmLoaded);\n        for (let el of this.targetEls) {\n            this.el.removeChild(el);\n        }\n    }\n});\n"],
  "mappings": "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AAAA,IAEf;AAAA,MACE,MAAM;AAAA,MACN,GAAG,CAAC,GAAG,GAAG,GAAG;AAAA;AAAA,IAEf;AAAA,MACE,MAAM;AAAA,MACN,GAAG,CAAC,GAAG,GAAG,GAAG;AAAA;AAAA,IAEf;AAAA,MACE,MAAM;AAAA,MACN,GAAG,CAAC,GAAG,GAAG,GAAG;AAAA;AAAA,IAEf;AAAA,MACE,MAAM;AAAA,MACN,GAAG,CAAC,GAAG,GAAG,GAAG;AAAA;AAAA,IAEf;AAAA,MACE,MAAM;AAAA,MACN,GAAG,CAAC,GAAG,GAAG,GAAG;AAAA;AAAA,IAEf;AAAA,MACE,MAAM;AAAA,MACN,GAAG,CAAC,GAAG,GAAG,GAAG;AAAA;AAAA,IAEf;AAAA,MACE,MAAM;AAAA,MACN,GAAG,CAAC,GAAG,GAAG,GAAG;AAAA;AAAA,IAEf;AAAA,MACE,MAAM;AAAA,MACN,GAAG,CAAC,GAAG,GAAG,GAAG;AAAA;AAAA,IAEf;AAAA,MACE,MAAM;AAAA,MACN,GAAG,CAAC,GAAG,GAAG,GAAG;AAAA;AAAA,IAEf;AAAA,MACE,MAAM;AAAA,MACN,GAAG,CAAC,GAAG,GAAG,GAAG;AAAA;AAAA,IAEf;AAAA,MACE,MAAM;AAAA,MACN,GAAG,CAAC,GAAG,GAAG,GAAG;AAAA;AAAA,IAEf;AAAA,MACE,MAAM;AAAA,MACN,GAAG,CAAC,GAAG,GAAG,GAAG;AAAA;AAAA,IAEf;AAAA,MACE,MAAM;AAAA,MACN,GAAG,CAAC,GAAG,GAAG,GAAG;AAAA;AAAA,IAEf;AAAA,MACE,MAAM;AAAA,MACN,GAAG,CAAC,GAAG,GAAG,GAAG;AAAA;AAAA,IAEf;AAAA,MACE,MAAM;AAAA,MACN,GAAG,CAAC,GAAG,GAAG,GAAG;AAAA;AAAA,IAEf;AAAA,MACE,MAAM;AAAA,MACN,GAAG,CAAC,GAAG,GAAG,GAAG;AAAA;AAAA,IAEf;AAAA,MACE,MAAM;AAAA,MACN,GAAG,CAAC,GAAG,GAAG,GAAG;AAAA;AAAA,IAEf;AAAA,MACE,MAAM;AAAA,MACN,GAAG,CAAC,GAAG,GAAG,GAAG;AAAA;AAAA,IAEf;AAAA,MACE,MAAM;AAAA,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",
  "names": []
}
